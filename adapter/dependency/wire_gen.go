// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dependency

import (
	"context"
	"go-hexagonal/adapter/repository/mysql/entity"
	"go-hexagonal/domain/event"
	"go-hexagonal/domain/repo"
	"go-hexagonal/domain/service"
)

// Injectors from wire.go:

// InitializeServices initializes all services
func InitializeServices(ctx context.Context) (*service.Services, error) {
	entityExample := entity.NewExample()
	inMemoryEventBus := provideEventBus()
	exampleService := provideExampleService(entityExample, inMemoryEventBus)
	services := provideServices(exampleService, inMemoryEventBus)
	return services, nil
}

// wire.go:

// provideEventBus creates and configures the event bus
func provideEventBus() *event.InMemoryEventBus {
	eventBus := event.NewInMemoryEventBus()

	loggingHandler := event.NewLoggingEventHandler()
	exampleHandler := event.NewExampleEventHandler()
	eventBus.Subscribe(loggingHandler)
	eventBus.Subscribe(exampleHandler)

	return eventBus
}

// provideExampleService creates and configures the example service
func provideExampleService(repo2 repo.IExampleRepo, eventBus event.EventBus) *service.ExampleService {
	exampleService := service.NewExampleService(repo2)
	exampleService.EventBus = eventBus
	return exampleService
}

// provideServices creates the services container
func provideServices(exampleService *service.ExampleService, eventBus event.EventBus) *service.Services {
	return service.NewServices(exampleService, eventBus)
}
